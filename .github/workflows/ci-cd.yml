name: DreamHub CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Match your project's Go version
          cache: false # Disable cache to potentially resolve tar error

      - name: Run Go Lint # Replace with your preferred linter, e.g., golangci-lint
        run: go vet ./... # Example, use golangci-lint run ./... if configured

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Match your project's Node version
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend

      - name: Run Frontend Lint
        run: npm run lint --prefix frontend

  test:
    runs-on: ubuntu-latest
    needs: lint # Optional: Run tests only if lint passes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false # Disable cache to potentially resolve tar error

      - name: Run Go Tests
        run: go test -v ./... # Add coverage flags if needed, e.g., -coverprofile=coverage.out

      # Optional: Upload Go coverage report
      # - name: Upload Go coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }} # Store Codecov token in secrets
      #     files: ./coverage.out
      #     flags: go

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend

      - name: Run Frontend Tests (Vitest)
        working-directory: ./frontend # Change working directory to frontend
        run: npm test -- --run --coverage # Run test command directly

      # Optional: Upload Vitest coverage report
      # - name: Upload Vitest coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     flags: frontend # Flag to distinguish coverage reports
      #     working-directory: ./frontend # Specify working directory for coverage file search

  build_and_push_image:
    runs-on: ubuntu-latest
    needs: test # Run build only if tests pass
    permissions:
      contents: read
      packages: write # Needed to push to GHCR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use the default GITHUB_TOKEN

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/dreamhub:latest
            ghcr.io/${{ github.repository_owner }}/dreamhub:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build args if needed, getting values from secrets
          # build-args: |
          #   VITE_API_URL=${{ secrets.VITE_API_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_image # Run deploy only after image is pushed
    environment: production # Optional: Define a GitHub environment for deployment secrets/rules
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Add checkout step to access repository files

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Copy files to server via sshpass scp
        run: |
          # Ensure target directory exists on server before copying
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /root/dreamhub"

          # Copy files using sshpass and scp
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || 22 }} ./docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/root/dreamhub/docker-compose.yml
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || 22 }} ./.env.example ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/root/dreamhub/.env.example
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || 22 }} ./init_db.sql ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/root/dreamhub/init_db.sql
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }} # Make password available to the script

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }} # Server IP or hostname
          username: ${{ secrets.SSH_USER }} # SSH username
          password: ${{ secrets.SSH_PASSWORD }} # SSH password
          port: ${{ secrets.SSH_PORT || 22 }} # SSH port (default 22)
          script: |
            # Ensure the target directory exists (scp action might create it, but double check)
            mkdir -p /root/dreamhub
            cd /root/dreamhub

            # Check if .env file exists. If not, deployment cannot proceed.
            if [ ! -f .env ]; then
              echo "Error: .env file not found in /root/dreamhub on the server."
              echo "Deployment requires a pre-existing .env file on the server for application configuration."
              exit 1 # Exit script because the required .env is missing
            else
              echo "Using existing .env file found on server."
            fi

            echo "Logging out from GHCR (just in case)..."
            docker logout ghcr.io || true # Use || true to ignore errors if not logged in
            echo "Pulling latest image..."
            # Ensure docker-compose.yml image points to the correct GHCR path
            # Example: sed -i 's|image: .*dreamhub.*|image: ghcr.io/${{ github.repository_owner }}/dreamhub:latest|g' docker-compose.yml
            docker pull ghcr.io/${{ github.repository_owner }}/dreamhub:latest

            echo "Starting new container with docker compose..."
            docker compose up -d --remove-orphans
            echo "Deployment complete!"
            # Optional: Prune old images
            # docker image prune -f